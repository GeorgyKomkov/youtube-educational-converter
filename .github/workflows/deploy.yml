name: Deploy to Production

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Create and verify credentials
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/ubuntu/youtube-converter
            
            echo "Creating credentials files..."
            echo '${{ secrets.YOUTUBE_CLIENT_SECRETS }}' > client_secrets.json
            echo '${{ secrets.YOUTUBE_API_KEY }}' > api.txt
            
            echo "Setting correct permissions..."
            chmod 644 client_secrets.json api.txt
            
            echo "Verifying files..."
            ls -la client_secrets.json api.txt

      - name: Deploy application
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/ubuntu/youtube-converter
            
            echo "Stopping and removing existing containers..."
            docker-compose down
            docker system prune -f
            
            echo "Building new container..."
            DOCKER_BUILDKIT=1 docker-compose build --no-cache
            
            echo "Starting container..."
            docker-compose up -d
            
            echo "Waiting for container to initialize..."
            sleep 45
            
            echo "Docker logs:"
            docker-compose logs
            
            echo "Container status:"
            docker ps -a
            
            echo "Memory usage:"
            free -h
            
            echo "Disk space:"
            df -h

      - name: Verify deployment
        run: |
          sleep 60
          for i in {1..5}; do
            echo "Attempt $i: Checking server status..."
            if curl -v --fail --max-time 30 http://${{ secrets.SSH_HOST }}:8080/health; then
              echo "Service is up and running!"
              exit 0
            fi
            echo "Attempt $i failed, waiting..."
            sleep 30
          done
          echo "Service failed to start properly"
          exit 1
