name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Verify secrets
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
          YOUTUBE_CLIENT_SECRETS: ${{ secrets.YOUTUBE_CLIENT_SECRETS }}
        run: |
          for var in SSH_HOST SSH_USER SSH_PRIVATE_KEY YOUTUBE_API_KEY YOUTUBE_CLIENT_SECRETS; do
            if [ -z "${!var}" ]; then
              echo "Error: $var is not set"
              exit 1
            fi
          done

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /opt/youtube-converter
            
            # Создаем бэкап текущих данных
            timestamp=$(date +%Y%m%d_%H%M%S)
            mkdir -p backups
            tar -czf backups/data_$timestamp.tar.gz videos output logs || true
            
            # Клонируем свежую версию из репозитория
            git fetch origin main
            git reset --hard origin/main
            
            # Проверяем наличие всех необходимых файлов
            required_files=(
              "docker-compose.yml"
              "Dockerfile"
              "requirements.txt"
              "start.sh"
              "Procfile"
              "config/logging.yaml"
              "config/config.yaml"
              "config/youtube.cookies"
            )
            
            for file in "${required_files[@]}"; do
              if [ ! -f "$file" ]; then
                echo "Error: $file not found"
                exit 1
              fi
            done
            
            # Обновляем только секретные значения в config.yaml
            sed -i "s|api_key:.*|api_key: ${{ secrets.YOUTUBE_API_KEY }}|g" config/config.yaml
            sed -i "s|client_secrets:.*|client_secrets: '${{ secrets.YOUTUBE_CLIENT_SECRETS }}'|g" config/config.yaml
            
            # Создаем .env файл
            cat > .env << 'EOL'
            YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}
            REDIS_URL=redis://redis:6379/0
            CELERY_BROKER_URL=redis://redis:6379/0
            MAX_WORKERS=2
            WHISPER_MODEL=tiny
            MAX_VIDEO_SIZE=500
            EMERGENCY_CLEANUP_THRESHOLD=85
            PROMETHEUS_PORT=9090
            GRAFANA_ADMIN_PASSWORD=admin
            EOL
            
            # Очистка и перезапуск
            docker-compose down
            docker system prune -af --volumes
            docker-compose pull
            docker-compose up -d --build
            
            # Ждем запуска контейнеров
            echo "Waiting for containers to start..."
            sleep 45
            
            # Проверка статуса и логов
            if ! docker-compose ps | grep -q "Up"; then
              echo "Error: Containers failed to start"
              echo "Server logs:"
              docker-compose logs server
              echo "Worker logs:"
              docker-compose logs worker
              exit 1
            fi

      - name: Health checks
        run: |
          check_endpoint() {
            local url=$1
            local name=$2
            local max_attempts=10
            local wait_time=60
            
            echo "Checking $name..."
            for i in $(seq 1 $max_attempts); do
              echo "Attempt $i of $max_attempts"
              if curl -sSf "$url" >/dev/null 2>&1; then
                echo "$name check passed"
                return 0
              fi
              echo "Waiting ${wait_time}s before next attempt..."
              sleep $wait_time
            done
            echo "$name check failed after $max_attempts attempts"
            return 1
          }
          
          # Проверяем только основной сервис
          check_endpoint "http://${{ secrets.SSH_HOST }}:8080/health" "API" || exit 1