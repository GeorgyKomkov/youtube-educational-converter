name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Добавляем возможность ручного запуска

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    env:
      DOCKER_COMPOSE_VERSION: v2.24.5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Cache Docker Compose
        uses: actions/cache@v3
        with:
          path: /usr/local/bin/docker-compose
          key: ${{ runner.os }}-docker-compose-${{ env.DOCKER_COMPOSE_VERSION }}
      
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}  # Приватный SSH ключ
          name: id_ed25519
          known_hosts: ${{ secrets.SSH_HOST }}  # Хост сервера
          
      - name: Add known hosts
        run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
      
      - name: Install Docker Compose
        run: |
          if [ ! -f /usr/local/bin/docker-compose ]; then
            # Скачиваем Docker Compose с проверкой хеша
            DOCKER_COMPOSE_URL="https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)"
            curl -L "${DOCKER_COMPOSE_URL}" -o docker-compose
            chmod +x docker-compose
            sudo mv docker-compose /usr/local/bin/
          fi
          docker-compose --version
      
      - name: Deploy to server
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}     # Хост сервера
          SSH_USER: ${{ secrets.SSH_USER }}     # Пользователь для SSH
          YOUTUBE_CLIENT_ID: ${{ secrets.YOUTUBE_CLIENT_ID }}
          YOUTUBE_CLIENT_SECRET: ${{ secrets.YOUTUBE_CLIENT_SECRET }}
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        run: |
          # Создаем директории если их нет
          ssh $SSH_USER@$SSH_HOST "mkdir -p /root/youtube-converter/{videos,output,temp,cache/models,logs,static/{css,js}}"
          
          # Копируем файлы на сервер
          scp -r * $SSH_USER@$SSH_HOST:/root/youtube-converter/
          
          # Копируем статические файлы
          scp static/css/styles.css $SSH_USER@$SSH_HOST:/root/youtube-converter/static/css/
          scp static/js/main.js $SSH_USER@$SSH_HOST:/root/youtube-converter/static/js/
          
          # Создаем .env файл с секретами
          ssh $SSH_USER@$SSH_HOST "cat > /root/youtube-converter/.env << EOF
          YOUTUBE_CLIENT_ID=${YOUTUBE_CLIENT_ID}
          YOUTUBE_CLIENT_SECRET=${YOUTUBE_CLIENT_SECRET}
          YOUTUBE_API_KEY=${YOUTUBE_API_KEY}
          EOF"
          
          # Устанавливаем права
          ssh $SSH_USER@$SSH_HOST "cd /root/youtube-converter && \
            chmod -R 777 videos output temp cache logs && \
            chmod 600 .env"
          
          # Перезапускаем сервисы
          ssh $SSH_USER@$SSH_HOST "cd /root/youtube-converter && \
            docker-compose down && \
            docker-compose pull && \
            docker-compose build --no-cache && \
            docker-compose up -d && \
            systemctl daemon-reload && \
            systemctl restart youtube-converter"
          
          # Проверяем статус
          ssh $SSH_USER@$SSH_HOST "cd /root/youtube-converter && \
            docker-compose ps && \
            docker-compose logs --tail=20"

      - name: Verify Deployment
        run: |
          # Ждем 30 секунд для запуска сервисов
          sleep 30
          
          # Проверяем доступность сервиса
          curl -f "http://${{ secrets.SSH_HOST }}:8080/health" || exit 1
        
      - name: Cleanup old images
        if: always()  # Выполняем даже при ошибках
        run: |
          ssh $SSH_USER@$SSH_HOST "docker system prune -af --volumes"

      - name: Notify on failure
        if: failure()
        run: |
          echo "Deployment failed!"
          # Здесь можно добавить отправку уведомлений (например, в Slack или по email)