from flask import Flask, request, jsonify, render_template_string, send_file, redirect, session, url_for
import os
import secrets
import threading
from youtube_api import YouTubeAPI
from datetime import datetime

app = Flask(__name__)
app.secret_key = secrets.token_hex(16)  # –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏

VIDEO_DIR = "/app/videos"
OUTPUT_DIR = "/app/output"
os.makedirs(VIDEO_DIR, exist_ok=True)
os.makedirs(OUTPUT_DIR, exist_ok=True)

# üîπ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–∞
HTML_PAGE = """
<!DOCTYPE html>
<html>
<head>
    <title>YouTube Video Downloader</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
        .alert { padding: 10px; margin-bottom: 15px; border-radius: 4px; }
        .error { background-color: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; }
        .success { background-color: #d4edda; border: 1px solid #c3e6cb; color: #155724; }
        input[type="text"] { width: 100%; padding: 8px; margin: 10px 0; }
        button { padding: 8px 16px; background: #007bff; color: white; border: none; cursor: pointer; }
        button:hover { background: #0056b3; }
    </style>
</head>
<body>
    <h2>YouTube Video Downloader</h2>
    
    {% if error_message %}
    <div class="alert error">{{ error_message }}</div>
    {% endif %}
    
    {% if success_message %}
    <div class="alert success">{{ success_message }}</div>
    {% endif %}
    
    <h3>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube</h3>
    <form action="/download" method="post">
        <input type="text" name="url" placeholder="https://www.youtube.com/watch?v=..." required>
        <button type="submit">–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É</button>
    </form>

    {% if download_url %}
        <h3>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ:</h3>
        <a href="{{ download_url }}" target="_blank">{{ download_url }}</a>
    {% endif %}
</body>
</html>
"""

youtube_api = YouTubeAPI()

@app.route("/", methods=["GET"])
def index():
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–µ—Å—Å–∏–∏
    error_message = session.pop('error_message', None)
    success_message = session.pop('success_message', None)
    download_url = session.pop('download_url', None)
    
    return render_template_string(HTML_PAGE, 
                                 download_url=download_url,
                                 error_message=error_message,
                                 success_message=success_message)

@app.route('/auth')
def auth():
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç OAuth2 –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é"""
    try:
        youtube_api.authenticate()
        return redirect(url_for('index'))
    except Exception as e:
        session['error_message'] = f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}"
        return redirect(url_for('index'))

@app.route("/download", methods=["POST"])
def download_video():
    video_url = request.form.get("url") or request.json.get("url")
    
    if not video_url:
        return jsonify({"error": "URL –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"}), 400

    try:
        video_id = video_url.split("v=")[-1]
        download_url, title = youtube_api.get_download_url(video_id)

        if not download_url:
            session['error_message'] = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ"
            return redirect(url_for('index'))

        session['success_message'] = f"–í–∏–¥–µ–æ '{title}' –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è!"
        session['download_url'] = download_url
        return redirect(url_for('index'))
    except Exception as e:
        session['error_message'] = f"–û—à–∏–±–∫–∞: {str(e)}"
        return redirect(url_for('index'))

@app.route("/health")
def health_check():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        "status": "healthy",
        "timestamp": datetime.now().isoformat()
    }), 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080)
